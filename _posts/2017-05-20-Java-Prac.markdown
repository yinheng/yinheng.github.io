---
layout:     post
title:      "Java Practises"
date:       2017-05-20 05:04:26 +0800
author:     "Tornaco"
published: true
categories: Java
---

[原文点我](http://www.importnew.com/22083.html)。

<!-- more -->


### 面向对象的特征有哪些方面？
封装、继承、多态。

### 访问修饰符public,private,protected,以及不写（默认）时的区别？

  public：类内部以及子类、包内部和包外均可调用。
  private：只有类内部可以调用。
  protected：只有类内部可以使用。
  default:类内部、包内部、子类可以调用。


> 修饰符	| 当前类 |	同 包 |	子 类	| 其他包 |
public |	√ |	√ |	√	| √ |
protected |	√ |	√ |	√ |	× |
default	| √ |	√	| ×  | 	× |
private |	√ |	× |	× |	× |

### String 是最基本的数据类型吗？
不是，是引用类型。

### float f=3.4;是否正确？
不正确，要加f。

### short s1 = 1; s1 = s1 + 1;有错吗? 
   short s1 = 1; s1 += 1;有错吗？
没错。

> 对于short s1 = 1; s1 = s1 + 1;由于1是int类型，因此s1+1运算结果也是int 型，需要强制转换类型才能赋值给short型。而short s1 = 1; s1 += 1;可以正确编译，因为s1+= 1;相当于s1 = (short)(s1 + 1);其中有隐含的强制类型转换。

### Java有没有goto？
没有。

### int和Integer有什么区别？
int 是基本数据类型，Integer是引用数据类型。

### &和&&的区别？
 &&是且，需前后条件同时满足。
 
> &是位运算符。&&是布尔逻辑运算符。
在运行上，&两边的条件都要判断（不管前面的是ture还是false），而&&先判断前面的，若为false，则后面的不再判断

### 解释内存中的栈(stack)、堆(heap)和静态区(static area)的用法。
栈里存的是对象的索引，堆里存的是实际的对象，静态区存的是静态的对象。

> 通常我们定义一个基本数据类型的变量，一个对象的引用，还有就是函数调用的现场保存都使用内存中的栈空间；而通过new关键字和构造器创建的对象放在堆空间；程序中的字面量（literal）如直接书写的100、”hello”和常量都是放在静态区中。栈空间操作起来最快但是栈很小，通常大量的对象都是放在堆空间，理论上整个内存没有被其他进程使用的空间甚至硬盘上的虚拟内存都可以被当成堆空间来使用。
```java
String str = new String("hello");
```
上面的语句中变量str放在栈上，用new创建出来的字符串对象放在堆上，而”hello”这个字面量放在静态区。


### Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？
12， -11。

### switch 是否能作用在byte 上，是否能作用在long 上，是否能作用在String上？
能做用在long上，不能在byte和String上。

> 在Java 5以前，switch(expr)中，expr只能是byte、short、char、int。从Java 5开始，Java中引入了枚举类型，expr也可以是enum类型，从Java 7开始，expr还可以是字符串（String），但是长整型（long）在目前所有的版本中都是不可以的。

### 数组有没有length()方法？String有没有length()方法？
数组有length（）方法，String没有length（），直接用.length。

> 数组没有length()方法，有length 的属性。String 有length()方法。JavaScript中，获得字符串的长度是通过length属性得到的，这一点容易和Java混淆。

### 构造器（constructor）是否可被重写（override）？
不可以，可以重载。

### 两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对？
对，equals比较的是两者内容是否相等，hash code是两个对象的引用，是不同的。

> 不对，如果两个对象x和y满足x.equals(y) == true，它们的哈希码（hash code）应当相同。Java对于eqauls方法和hashCode方法是这样规定的：(1)如果两个对象相同（equals方法返回true），那么它们的hashCode值一定要相同；(2)如果两个对象的hashCode相同，它们并不一定相同。当然，你未必要按照要求去做，但是如果你违背了上述原则就会发现在使用容器时，相同的对象可以出现在Set集合中，同时增加新元素的效率会大大下降（对于使用哈希存储的系统，如果哈希码频繁的冲突将会造成存取性能急剧下降）。

### 是否可以继承String类？
不可以。

### 当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？
引用传递。

> 是值传递。Java语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的。C++和C#中可以通过传引用或传输出参数来改变传入的参数的值。在C#中可以编写如下所示的代码，但是在Java中却做不到。                 

### String和StringBuilder、StringBuffer的区别？
String 是一个引用类型，StringBuffer有更多的方法，如append（）。

> Java平台提供了两种类型的字符串：String和StringBuffer/StringBuilder，它们可以储存和操作字符串。其中String是只读字符串，也就意味着String引用的字符串内容是不能被改变的。而StringBuffer/StringBuilder类表示的字符串对象可以直接进行修改。StringBuilder是Java 5中引入的，它和StringBuffer的方法完全相同，区别在于它是在单线程环境下使用的，因为它的所有方面都没有被synchronized修饰，因此它的效率也比StringBuffer要高。

### 重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？
重载是指方法的参数个数不同或形参类型不同，方法名相同。重写是子类继承父类时，对父类方法的重写，方法名相同，方法的具体实现不同。重载的方法不能根据返回类型区分，他们的返回类型是相同的。

### 抽象类（abstract class）和接口（interface）有什么异同？
抽象类和接口的方法都没有具体实现，抽象类可被其他类继承，接口需要其他类实现。

> 抽象类和接口都不能够实例化，但可以定义抽象类和接口类型的引用。一个类如果继承了某个抽象类或者实现了某个接口都需要对其中的抽象方法全部进行实现，否则该类仍然需要被声明为抽象类。接口比抽象类更加抽象，因为抽象类中可以定义构造器，可以有抽象方法和具体方法，而接口中不能定义构造器而且其中的方法全部都是抽象方法。抽象类中的成员可以是private、默认、protected、public的，而接口中的成员全都是public的。抽象类中可以定义成员变量，而接口中定义的成员变量实际上都是常量。有抽象方法的类必须被声明为抽象类，而抽象类未必要有抽象方法。